{"version":3,"sources":["UI/Input/Auth/index.module.scss","components/PassInput/index.module.scss","pages/Auth/index.module.scss","UI/Form/Auth/index.module.scss","UI/Button/Auth/index.module.scss","store/system/types.ts","store/system/actions.ts","store/user/types.ts","store/user/actions.ts","store/selectedCardsIdList/types.ts","store/user/reducer.ts","store/system/reducer.ts","store/selectedCardsIdList/actions.ts","store/foldersList/types.ts","store/selectedCardsIdList/reducer.ts","store/foldersList/actions.ts","store/cardsList/types.ts","store/foldersList/reducer.ts","store/cardsList/actions.ts","store/cardsList/reducer.ts","store/index.ts","helpers/getResponse.ts","helpers/getClassName.ts","UI/Input/Auth/index.tsx","hooks/useActions.ts","hooks/useFetch.ts","hooks/useTypedSelector.ts","UI/Form/Auth/index.tsx","UI/Button/Auth/index.tsx","components/PassInput/index.tsx","containers/PassInput/index.tsx","components/RegForm/index.tsx","API/authService/index.ts","containers/RegForm/index.tsx","pages/Auth/RegistrationPage/index.tsx","App.tsx","index.tsx","components/RegForm/index.module.scss"],"names":["module","exports","SystemReducerActionTypes","UserReducerActionTypes","logIn","type","LOG_IN","logOut","LOG_OUT","changeCardsDisplayMode","displayMode","CHANGE_CARDS_DISPLAY_MODE","payload","changeTheme","theme","CHANGE_THEME","pullAuthToken","authToken","localStorage","setItem","LOCAL_STORAGE_TOKEN_KEY","PULL_AUTH_TOKEN","openModalWindow","componentInModal","OPEN_MODAL_WINDOW","closeModalWindow","CLOSE_MODAL_WINDOW","SelectedCardsListActionTypes","fetchUserData","data","FETCH_USER_DATA","changeAvatar","avatarUrl","CHANGE_AVATAR","fetchUserDataAndLogIn","login","dispatch","initialState","isAuthorized","modalIsOpen","FoldersListReducerActionTypes","selectCard","id","SELECT_CARD","cancelSelectCard","CANCEL_SELECT_CARD","cancelSelectAllCards","CANCEL_SELECT_ALL_CARDS","CardsListReducerActionTypes","fetchFolders","folders","FETCH_FOLDERS","createFolder","folder","CREATE_FOLDER","editFolder","EDIT_FOLDER","deleteFolder","DELETE_FOLDER","fetchCardsPaginationMode","cards","FETCH_CARDS_PAGINATION_MODE","fetchCardsScrollMode","FETCH_CARDS_SCROLL_MODE","createCard","card","CREATE_CARD","editCard","EDIT_CARD","deleteCard","newCard","DELETE_CARD","actions","userActions","cardsListActions","foldersListActions","selectedCardsIdListActions","systemActions","rootReducer","combineReducers","userState","state","action","cardsListState","map","slice","filteredState","filter","selectedCardsIdListState","cardId","foldersListState","systemState","store","createStore","composeWithDevTools","applyMiddleware","thunk","getResponse","apiUrl","params","a","fetch","response","json","ok","error","console","log","Error","message","getClassName","classNames","reduce","accum","value","classNamesChain","Object","entries","forEach","className","AuthInput","changeHandler","placeholder","children","useState","isFocused","setIsFocused","focusHandler","useCallback","blurHandler","inputContainerClassName","useMemo","cl","inputAuthContainer","inputClassName","inputAuth","inputIsFocused","onChange","onFocus","onBlur","memo","typesOfActions","user","cardsList","foldersList","selectedCardsIdList","system","useActions","typeOfActionsKey","useDispatch","typeOfAction","bindActionCreators","useFetch","callback","setError","changeIsLoading","setIsLoading","hasStrangerSetIsLoading","Boolean","undefined","isLoading","fetching","useTypedSelector","useSelector","AuthForm","onSubmit","useFetchCallback","getAuth","submitHandler","event","preventDefault","authForm","AuthButton","isDisabled","disabled","authButton","defaultProps","PassInput","clickHandler","Auth","passIcon","toggleViewPassBtn","hidePass","openPass","onClick","setType","prev","RegForm","changeLoginHandler","password","changePasswordHandler","confirmPassword","changeConfirmPasswordHandler","submitIsDisabled","regFormWrapper","loginInputIcon","loginInput","authButtonWithFormError","centered","link","href","authService","method","body","JSON","stringify","headers","BASE_API_URL","register","setLogin","setPassword","setConfirmPassword","length","target","RegistrationPage","regBackground","regContainer","regDecorativeImg","App","useEffect","document","ReactDOM","render","StrictMode","getElementById"],"mappings":"0GACAA,EAAOC,QAAU,CAAC,mBAAqB,iCAAiC,eAAiB,6BAA6B,UAAY,wBAAwB,UAAY,0B,yGCAtKD,EAAOC,QAAU,CAAC,SAAW,4BAA4B,kBAAoB,qCAAqC,SAAW,4BAA4B,SAAW,8B,mBCApKD,EAAOC,QAAU,CAAC,aAAe,2BAA2B,cAAgB,4BAA4B,eAAiB,6BAA6B,iBAAmB,+BAA+B,kBAAoB,kC,mBCA5ND,EAAOC,QAAU,CAAC,SAAW,yB,mBCA7BD,EAAOC,QAAU,CAAC,WAAa,2B,gpCCCnBC,E,kFAAAA,K,gBAAAA,E,kBAAAA,E,sDAAAA,E,4BAAAA,E,kCAAAA,E,sCAAAA,E,yCAAAA,M,KCaL,ICbKC,EDaCC,EAAQ,iBAAoB,CACrCC,KAAMH,EAAyBI,SAGtBC,EAAS,iBAAqB,CACvCF,KAAMH,EAAyBM,UAGtBC,EAAyB,SAACC,GAAD,MAA6D,CAC/FL,KAAMH,EAAyBS,0BAC/BC,QAASF,IAGAG,EAAc,SAACC,GAAD,MAAsC,CAC7DT,KAAMH,EAAyBa,aAC/BH,QAASE,IAGAE,EAAgB,SAACC,GAG1B,OAFAC,aAAaC,QAAQC,IAAyBH,GAEvC,CACHZ,KAAMH,EAAyBmB,gBAC/BT,QAASK,IAIJK,EAAkB,SAACC,GAAD,MAAgE,CAC3FlB,KAAMH,EAAyBsB,kBAC/BZ,QAASW,IAGAE,EAAmB,iBAA+B,CAC3DpB,KAAMH,EAAyBwB,sB,SC9CvBvB,K,kCAAAA,E,+BAAAA,M,KCcL,ICdKwB,EDcCC,EAAgB,SAACC,GAAD,MAAuC,CAChExB,KAAMF,EAAuB2B,gBAC7BlB,QAASiB,IAGAE,EAAe,SAACC,GAAD,MAAmD,CAC3E3B,KAAMF,EAAuB8B,cAC7BrB,QAASoB,IAGAE,EACT,SAAC,GAAD,IAAEF,EAAF,EAAEA,UAAWf,EAAb,EAAaA,UAAWH,EAAxB,EAAwBA,MAAOqB,EAA/B,EAA+BA,MAA/B,OACA,SAACC,GACGA,EAASR,EAAc,CAACI,YAAWG,WACnCC,EAASvB,EAAYC,IACrBsB,EAASpB,EAAcC,IACvBmB,EAAShC,O,OE1BXiC,EAAsB,CACxBF,MAAO,GACPH,UAAW,ICcTK,EAAwB,CAC1BC,cAAc,EACd5B,YAAa,SACb6B,aAAa,EACbhB,iBAAkB,KAClBT,MAAO,QACPG,UAAW,K,SF1BHU,K,0BAAAA,E,wCAAAA,E,mDAAAA,M,KGOL,ICPKa,EDOCC,EAAa,SAACC,GAAD,MAAmC,CACzDrC,KAAMsB,EAA6BgB,YACnC/B,QAAS8B,IAGAE,EAAmB,SAACF,GAAD,MAAyC,CACrErC,KAAMsB,EAA6BkB,mBACnCjC,QAAS8B,IAGAI,EAAuB,iBAAmC,CACnEzC,KAAMsB,EAA6BoB,0B,OETjCV,EAAyB,I,SDTnBG,K,8BAAAA,E,8BAAAA,E,0BAAAA,E,+BAAAA,M,KEQL,ICRKQ,EDQCC,EAAe,SAACC,GAAD,MAA6C,CACrE7C,KAAMmC,EAA8BW,cACpCvC,QAASsC,IAGAE,EAAe,SAACC,GAAD,MAA0C,CAClEhD,KAAMmC,EAA8Bc,cACpC1C,QAASyC,IAGAE,EAAa,SAACF,GAAD,MAAwC,CAC9DhD,KAAMmC,EAA8BgB,YACpC5C,QAASyC,IAGAI,EAAe,SAACf,GAAD,MAAuC,CAC/DrC,KAAMmC,EAA8BkB,cACpC9C,QAAS8B,IEfPL,EAA0B,I,SDVpBW,K,0DAAAA,E,kDAAAA,E,0BAAAA,E,sBAAAA,E,2BAAAA,M,KESL,IAAMW,EAA2B,SAACC,GAAD,MAAqD,CACzFvD,KAAM2C,EAA4Ba,4BAClCjD,QAASgD,IAGAE,EAAuB,SAACF,GAAD,MAAiD,CACjFvD,KAAM2C,EAA4Be,wBAClCnD,QAASgD,IAGAI,EAAa,SAACC,GAAD,MAAoC,CAC1D5D,KAAM2C,EAA4BkB,YAClCtD,QAASqD,IAGAE,EAAW,SAACF,GAAD,MAAkC,CACtD5D,KAAM2C,EAA4BoB,UAClCxD,QAASqD,IAIAI,EAAa,SAAC,GAAD,IAAE3B,EAAF,EAAEA,GAAI4B,EAAN,EAAMA,QAAN,MAAwD,CAC9EjE,KAAM2C,EAA4BuB,YAClC3D,QAAS,CACL8B,KACA4B,aClBFjC,EAAwB,GCRjBmC,EAAU,CACnBC,cACAC,mBACAC,qBACAC,6BACAC,iBAGEC,EAAcC,0BAAgB,CAChCC,UVRuB,WAAsD,IAArDC,EAAoD,uDAA5C5C,EAAc6C,EAA8B,uCAC5E,OAAQA,EAAO7E,MACX,KAAKF,EAAuB2B,gBACxB,OAAO,2BAAImD,GAAUC,EAAOtE,SAChC,KAAKT,EAAuB8B,cACxB,OAAO,2BAAIgD,GAAX,IAAkBjD,UAAWkD,EAAOtE,UACxC,QACI,OAAOqE,IUEfE,eDA4B,WAAsE,IAArEF,EAAoE,uDAAnD5C,EAAc6C,EAAqC,uCACjG,OAAQA,EAAO7E,MACX,KAAK2C,EAA4Ba,4BAC7B,OAAOqB,EAAOtE,QAClB,KAAKoC,EAA4Be,wBAC7B,MAAM,GAAN,mBAAWkB,GAAX,YAAqBC,EAAOtE,UAChC,KAAKoC,EAA4BkB,YAC7B,MAAM,CAAEgB,EAAOtE,SAAf,mBAA2BqE,IAC/B,KAAKjC,EAA4BoB,UAC7B,OAAOa,EAAMG,KAAI,SAACnB,GAAD,OAAWA,EAAKvB,KAAOwC,EAAOtE,QAAQ8B,GAAKwC,EAAOtE,QAAUqD,KAAOoB,MAAM,GAAI,GAClG,KAAKrC,EAA4BuB,YAC7B,IAAMe,EAAgBL,EAAMM,QAAO,SAACtB,GAAD,OAAUA,EAAKvB,KAAOwC,EAAOtE,QAAQ8B,MAExE,OAAOwC,EAAOtE,QAAQ0D,QAAf,sBAA6BgB,GAA7B,CAA4CJ,EAAOtE,QAAQ0D,UAAWgB,EACjF,QACI,OAAOL,ICdfO,yBNRsC,WAG1B,IAFZP,EAEW,uDAFO5C,EAClB6C,EACW,uCACX,OAAQA,EAAO7E,MACX,KAAKsB,EAA6BgB,YAC9B,MAAM,GAAN,mBAAWsC,GAAX,CAAkBC,EAAOtE,UAC7B,KAAKe,EAA6BkB,mBAC9B,OAAOoC,EAAMM,QAAO,SAACE,GAAD,OAAYA,IAAWP,EAAOtE,WACtD,KAAKe,EAA6BoB,wBAC9B,MAAO,GACX,QACI,OAAOkC,IMHfS,iBHR8B,WAA4E,IAA3ET,EAA0E,uDAAvD5C,EAAc6C,EAAyC,uCACzG,OAAQA,EAAO7E,MACX,KAAKmC,EAA8BW,cAC/B,OAAO+B,EAAOtE,QAClB,KAAK4B,EAA8Bc,cAC/B,MAAM,GAAN,mBAAW2B,GAAX,CAAkBC,EAAOtE,UAC7B,KAAK4B,EAA8BgB,YAC/B,OAAOyB,EAAMG,KAAI,SAAC/B,GAAD,OAAaA,EAAOX,KAAOwC,EAAOtE,QAAQ8B,GAAKwC,EAAOtE,QAAUyC,KACrF,KAAKb,EAA8BkB,cAC/B,OAAOuB,EAAMM,QAAO,SAAClC,GAAD,OAAYA,EAAOX,KAAOwC,EAAOtE,WACzD,QACI,OAAOqE,IGFfU,YTQyB,WAA0E,IAAzEV,EAAwE,uDAAvD5C,EAAc6C,EAAyC,uCAClG,OAAQA,EAAO7E,MACX,KAAKH,EAAyBI,OAC1B,OAAO,2BAAI2E,GAAX,IAAkB3C,cAAc,IACpC,KAAKpC,EAAyBM,QAC1B,OAAO,2BAAIyE,GAAX,IAAkB3C,cAAc,IACpC,KAAKpC,EAAyBS,0BAC1B,OAAO,2BAAIsE,GAAX,IAAkBvE,YAAawE,EAAOtE,UAC1C,KAAKV,EAAyBa,aAC1B,OAAGmE,EAAOtE,UAAYqE,EAAMnE,MAAcmE,EAEnC,2BAAIA,GAAX,IAAkBnE,MAAOoE,EAAOtE,UACpC,KAAKV,EAAyBmB,gBAC1B,OAAO,2BAAI4D,GAAX,IAAkBhE,UAAWiE,EAAOtE,UACxC,KAAKV,EAAyBsB,kBAC1B,OAAO,2BAAIyD,GAAX,IAAkB1C,aAAa,EAAMhB,iBAAkB2D,EAAOtE,UAClE,KAAKV,EAAyBwB,mBAC1B,OAAO,2BAAIuD,GAAX,IAAkB1C,aAAa,EAAOhB,iBAAkB,OAC5D,QACI,OAAO0D,MStBNW,EAAQC,sBAAYf,EAAagB,8BAAoBC,0BAAgBC,O,2CC5B5EC,GAAW,yCAAG,WAAUC,EAAgBC,GAA1B,kBAAAC,EAAA,sEACOC,MAAMH,EAAQC,GADrB,cACVG,EADU,gBAEGA,EAASC,OAFZ,UAEV1E,EAFU,OAIXyE,EAASE,GAJE,sBAKR3E,EAAK4E,OAAOC,QAAQC,IAAI9E,EAAK4E,OAC3B,IAAIG,MAAM/E,EAAKgF,SANT,gCASThF,GATS,4CAAH,wDAYFoE,MCcAa,GApBM,SAACC,GAAD,OACjBA,EAAWC,QAAO,SAACC,EAAeC,GAC9B,IAAIC,EAAkBF,EAEtB,MAAqB,kBAAVC,GACQE,OAAOC,QAAQH,GAEvBI,SAAQ,YAA4B,IAAD,oBAAzBC,EAAyB,YAElCJ,EAAe,UAAMA,EAAN,YAAyBI,OAIzCJ,GAEXA,EAAe,UAAMA,EAAN,YAAyBD,KAGzC,K,4BCVDM,GAAgC,SAAC,GAAoE,IAAnEC,EAAkE,EAAlEA,cAAeC,EAAmD,EAAnDA,YAAaR,EAAsC,EAAtCA,MAAOK,EAA+B,EAA/BA,UAAWlH,EAAoB,EAApBA,KAAMsH,EAAc,EAAdA,SACxF,EAAkCC,oBAAkB,GAApD,oBAAOC,EAAP,KAAkBC,EAAlB,KACMC,EAAgBC,uBAAY,kBAAMF,GAAa,KAAO,CAACA,IACvDG,EAAcD,uBAAY,kBAAMF,GAAa,KAAQ,CAACA,IAEtDI,EAA0BC,mBAC5B,kBAAMrB,GAAa,CAACsB,KAAGC,mBAAoBd,GAAa,OACxD,CAACa,KAAIb,EAAWT,KAEdwB,EAAiBH,mBAAQ,kBAAMrB,GAAa,CAACsB,KAAGG,cAAa,CAACH,KAAItB,KAExE,OACI,yBAAOS,UAAWT,GAAa,CAACoB,EAAD,gBAC1BE,KAAGI,eAAiBX,KADzB,UAGI,wBACIH,YAAaA,EACbR,MAAOA,EACPK,UAAWe,EACXG,SAAUhB,EACViB,QAASX,EACTY,OAAQV,EACR5H,KAAMA,IAETsH,MAKEiB,kBAAKpB,IC/BdqB,GAAiC,CACnCC,KAAM,cACNC,UAAW,mBACXC,YAAa,qBACbC,oBAAqB,6BACrBC,OAAQ,iBAUGC,GAPI,SAAIC,GACnB,IAAMhH,EAAWiH,cACXC,EAAeT,GAAeO,GAEpC,OAAOG,6BAA2B/E,EAAQ8E,GAAelH,ICS9CoH,GAtBY,SAACC,EAAD,GAA0D,IAA9CC,EAA6C,EAA7CA,SAAwBC,EAAqB,EAAnCC,aACvCC,EAA0BC,QAAQH,GACxC,EAAkCE,EACE,MAACE,EAAWJ,GACZ/B,oBAAkB,GAFtD,oBAAOoC,EAAP,KAAkBJ,EAAlB,KAIMK,EAAkB,yCAAG,uBAAA7D,EAAA,yDACnBwD,EADmB,iEAInBA,GAAa,GAJM,SAKbH,IALa,uDAOf,KAAE5C,SAAW6C,GAAUA,EAAS,KAAE7C,SAPnB,yBASnB+C,GAAa,GATM,4EAAH,qDAaxB,OAAOC,EAA0B,CAACI,GAAY,CAACA,EAAUH,QAAQE,KCxBtDE,GAF2CC,I,oBCSpDC,GAA8B,SAAC,GAAkD,IAAjDC,EAAgD,EAAhDA,SAAUX,EAAsC,EAAtCA,SAAUE,EAA4B,EAA5BA,aAAcjC,EAAc,EAAdA,SAGpE,EAFyBK,sBAAYwB,GAAU,CAACa,EAAUX,EAAUE,GAElDU,CAAiBD,EAAU,CAACX,WAAUE,iBAAjDW,EAAP,qBAEMC,EAAgBxC,uBAAY,SAACyC,GAC/BA,EAAMC,iBACNH,MACD,CAACA,IAEJ,OAAO,uBAAMhD,UAAWa,KAAGuC,SAAUN,SAAUG,EAAxC,SAAwD7C,KAGpDiB,kBAAKwB,I,oBCddQ,GAAkC,SAAC,GAAD,IAAErD,EAAF,EAAEA,UAAWyC,EAAb,EAAaA,UAAWa,EAAxB,EAAwBA,WAAYlD,EAApC,EAAoCA,SAApC,OACpC,yBAAQtH,KAAK,SAASyK,SAAUD,EAAYtD,UAAWT,GAAa,CAACsB,KAAG2C,WAAYxD,GAAa,KAAjG,SACKyC,EAAY,UAAYrC,KAIjCiD,GAAWI,aAAe,CACtBzD,eAAWwC,GAGAa,U,oBCAAK,GAXuB,SAAC,GAAD,IAAE/D,EAAF,EAAEA,MAAOQ,EAAT,EAASA,YAAarH,EAAtB,EAAsBA,KAAMoH,EAA5B,EAA4BA,cAAeyD,EAA3C,EAA2CA,aAA3C,OAClC,eAACC,GAAD,CAAW5D,UAAWa,KAAGgD,SAAU1D,YAAaA,EAAaR,MAAOA,EAAO7G,KAAMA,EAAMoH,cAAeA,EAAtG,SACI,yBACIF,UAAWT,GAAa,CAACsB,KAAGiD,kBAA4B,aAAThL,EAAsB+H,KAAGkD,SAAWlD,KAAGmD,WACtFlL,KAAK,SACL,aAAW,eACXmL,QAASN,OCVfD,GAAgC,SAAC,GAAyC,IAAxCxD,EAAuC,EAAvCA,cAAeC,EAAwB,EAAxBA,YAAaR,EAAW,EAAXA,MAChE,EAAwBU,mBAA8B,YAAtD,oBAAOvH,EAAP,KAAaoL,EAAb,KAEMP,EAAelD,uBAAY,kBAAMyD,GAAQ,SAACC,GAAD,MAAoB,SAATA,EAAkB,WAAa,YAAU,CAACD,IAEpG,OAAO,eAAC,GAAD,CAAoB/D,YAAaA,EAAaR,MAAOA,EAAO7G,KAAMA,EAAMoH,cAAeA,EAAeyD,aAAcA,KAGhHtC,kBAAKqC,I,mBCkDLU,GA1CmB,SAAC,GAAD,IAC9BtB,EAD8B,EAC9BA,SACAX,EAF8B,EAE9BA,SACAE,EAH8B,EAG9BA,aACAzH,EAJ8B,EAI9BA,MACAyJ,EAL8B,EAK9BA,mBACAC,EAN8B,EAM9BA,SACAC,EAP8B,EAO9BA,sBACAC,EAR8B,EAQ9BA,gBACAC,EAT8B,EAS9BA,6BACAvF,EAV8B,EAU9BA,MACAwF,EAX8B,EAW9BA,iBACAjC,EAZ8B,EAY9BA,UAZ8B,OAc9B,sBAAKzC,UAAWa,KAAG8D,eAAnB,SACI,gBAAC,GAAD,CAAU7B,SAAUA,EAAUX,SAAUA,EAAUE,aAAcA,EAAhE,UACI,4CACA,oDACA,eAACuB,GAAD,CACI5D,UAAWT,GAAa,CAACsB,KAAG+D,eAAgB/D,KAAGgE,aAC/C1E,YAAY,QACZR,MAAO/E,EACPsF,cAAemE,EACfvL,KAAK,SAET,eAAC,GAAD,CAAWqH,YAAY,WAAWR,MAAO2E,EAAUpE,cAAeqE,IAClE,eAAC,GAAD,CACIpE,YAAY,oBACZR,MAAO6E,EACPtE,cAAeuE,IAElBvF,GAAS,oBAAGc,UAAWa,KAAG3B,MAAjB,SAAyBA,IACnC,eAAC,GAAD,CAAYc,UAAWT,GAAa,CAACsB,KAAG2C,WAAJ,gBAC/B3C,KAAGiE,wBAA0BvC,QAAQrD,MACrCuD,UAAWA,EAAWa,WAAYoB,EAFvC,sBAKA,qBAAG1E,UAAWa,KAAGkE,SAAjB,sCAAoD,oBAAG/E,UAAWa,KAAGmE,KAAMC,KAAK,IAA5B,4BC5BjDC,GA3BmB,CACxBrM,MADwB,YACE,OAAD,wHAAlB+B,EAAkB,EAAlBA,MAAO0J,EAAW,EAAXA,SACD,qBACT1F,EAAS,CACXuG,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAC1K,QAAO0J,aAC7BiB,QAAS,CACL,eAAgB,qBANG,kBAUpB7G,GAAY,GAAD,OAAI8G,IAAJ,YATH,sBASiC5G,IAVrB,8CAYzB6G,SAbwB,YAae,OAAD,wHAA5B7K,EAA4B,EAA5BA,MAAO0J,EAAqB,EAArBA,SACJ,oBACT1F,EAAS,CACXuG,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAC1K,QAAO0J,aAC7BiB,QAAS,CACL,eAAgB,qBANgB,kBAUjC7G,GAAY,GAAD,OAAI8G,IAAJ,YATH,qBASiC5G,IAVR,+CC8BjCwF,GA1CK,WAChB,MAA0B/D,mBAAiB,IAA3C,oBAAOzF,EAAP,KAAc8K,EAAd,KACA,EAAgCrF,mBAAiB,IAAjD,oBAAOiE,EAAP,KAAiBqB,EAAjB,KACA,EAA8CtF,mBAAiB,IAA/D,oBAAOmE,EAAP,KAAwBoB,EAAxB,KACA,EAA0BvF,mBAAiB,IAA3C,oBAAOnB,EAAP,KAAciD,EAAd,KACA,EAAkC9B,oBAAkB,GAApD,oBAAOoC,EAAP,KAAkBJ,EAAlB,KACO1H,EAAyBiH,GAA+B,QAAxDjH,sBAED+J,EAAmB9D,mBACrB,kBAAMhG,EAAMiL,OAAS,GAAKjL,EAAMiL,OAAS,IAAMvB,EAASuB,OAAS,GAAKrB,IAAoBF,IAC1F,CAAC1J,EAAO0J,EAAUE,IAGhBvB,EAAgBxC,sBAAW,wBAAC,6BAAA5B,EAAA,0DAC1B6F,EAD0B,iEAEXQ,GAAYO,SAAS,CAAC7K,QAAO0J,aAFlB,OAExBhK,EAFwB,OAI9BK,EAAsBL,GAJQ,2CAK/B,CAAC4K,GAAaR,IAEXL,EAAqB5D,uBAAY,SAACyC,GAAD,OAAWwC,EAASxC,EAAM4C,OAAOnG,SAAQ,IAC1E4E,EAAwB9D,uBAAY,SAACyC,GAAD,OAAWyC,EAAYzC,EAAM4C,OAAOnG,SAAQ,IAChF8E,EAA+BhE,uBAAY,SAACyC,GAAD,OAAW0C,EAAmB1C,EAAM4C,OAAOnG,SAAQ,IAEpG,OACI,eAAC,GAAD,CACImD,SAAUG,EACVyB,iBAAkBA,EAClBjC,UAAWA,EACXvD,MAAOA,EACPtE,MAAOA,EACP0J,SAAUA,EACVE,gBAAiBA,EACjBH,mBAAoBA,EACpBE,sBAAuBA,EACvBE,6BAA8BA,EAC9BtC,SAAUA,EACVE,aAAcA,K,oBC3BX0D,GAXU,kBACrB,sBAAK/F,UAAWa,KAAGmF,cAAnB,SACI,uBAAKhG,UAAWa,KAAGoF,aAAnB,UACI,sBAAKjG,UAAWa,KAAGqF,mBACnB,sBAAKlG,UAAWa,KAAG8D,eAAnB,SACI,eAAC,GAAD,YCKDwB,GAVH,WACR,IAAO5M,EAASoJ,IAAiB,SAACjF,GAAD,OAAWA,EAAMU,eAA3C7E,MAMP,OAJA6M,qBAAU,WACNC,SAASjB,KAAKjK,GAAK5B,IACpB,CAACA,IAEG,eAAC,GAAD,K,MCHX+M,IAASC,OACL,eAAC,IAAMC,WAAP,UACI,eAAC,IAAD,CAAUnI,MAAOA,EAAjB,SACI,eAAC,GAAD,QAGRgI,SAASI,eAAe,U,kBCd5BhO,EAAOC,QAAU,CAAC,WAAa,4BAA4B,eAAiB,gCAAgC,eAAiB,gCAAgC,SAAW,0BAA0B,MAAQ,uBAAuB,WAAa,4BAA4B,wBAA0B,yCAAyC,KAAO,yB","file":"static/js/main.5e94b6d0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputAuthContainer\":\"Auth_inputAuthContainer__34nCX\",\"inputIsFocused\":\"Auth_inputIsFocused__2josz\",\"inputAuth\":\"Auth_inputAuth__2RdKA\",\"darkTheme\":\"Auth_darkTheme__16R4i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"passIcon\":\"PassInput_passIcon__14J1j\",\"toggleViewPassBtn\":\"PassInput_toggleViewPassBtn__2OKMp\",\"openPass\":\"PassInput_openPass__3Jj4R\",\"hidePass\":\"PassInput_hidePass__JcxnR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"regContainer\":\"Auth_regContainer__1GE93\",\"regBackground\":\"Auth_regBackground__1dKZT\",\"regFormWrapper\":\"Auth_regFormWrapper__3UWN6\",\"regDecorativeImg\":\"Auth_regDecorativeImg__2SzHW\",\"authDecorativeImg\":\"Auth_authDecorativeImg__2on3X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"authForm\":\"Auth_authForm__3nfCK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"authButton\":\"Auth_authButton__1RCw0\"};","import {AuthToken, ComponentInModal, DisplayMode, Theme} from 'types/system.types'\r\n\r\nexport enum SystemReducerActionTypes {\r\n    LOG_IN = 'LOG_IN',\r\n    LOG_OUT = 'LOG_OUT',\r\n    CHANGE_CARDS_DISPLAY_MODE = 'CHANGE_CARDS_DISPLAY_MODE',\r\n    CHANGE_THEME = 'CHANGE_THEME',\r\n    PULL_AUTH_TOKEN = 'PULL_AUTH_TOKEN',\r\n    OPEN_MODAL_WINDOW = 'OPEN_MODAL_WINDOW',\r\n    CLOSE_MODAL_WINDOW = 'CLOSE_MODAL_WINDOW',\r\n}\r\n\r\nexport interface LogInAction {\r\n    type: SystemReducerActionTypes.LOG_IN\r\n}\r\n\r\nexport interface LogOutAction {\r\n    type: SystemReducerActionTypes.LOG_OUT\r\n}\r\n\r\nexport interface ChangeCardsDisplayModeAction {\r\n    type: SystemReducerActionTypes.CHANGE_CARDS_DISPLAY_MODE\r\n    payload: DisplayMode\r\n}\r\n\r\nexport interface ChangeThemeAction {\r\n    type: SystemReducerActionTypes.CHANGE_THEME\r\n    payload: Theme\r\n}\r\n\r\nexport interface PullAuthTokenAction {\r\n    type: SystemReducerActionTypes.PULL_AUTH_TOKEN\r\n    payload: AuthToken\r\n}\r\n\r\nexport interface OpenModalWindowAction {\r\n    type: SystemReducerActionTypes.OPEN_MODAL_WINDOW\r\n    payload: ComponentInModal\r\n}\r\n\r\nexport interface CloseModalWindowAction {\r\n    type: SystemReducerActionTypes.CLOSE_MODAL_WINDOW\r\n}\r\n","import {LOCAL_STORAGE_TOKEN_KEY} from 'constants.json'\r\n\r\nimport {AuthToken, ComponentInModal, DisplayMode, Theme} from 'types/system.types'\r\n\r\nimport {\r\n    SystemReducerActionTypes,\r\n    LogInAction,\r\n    LogOutAction,\r\n    ChangeCardsDisplayModeAction,\r\n    ChangeThemeAction,\r\n    PullAuthTokenAction,\r\n    OpenModalWindowAction,\r\n    CloseModalWindowAction,\r\n} from './types'\r\n\r\nexport const logIn = (): LogInAction => ({\r\n    type: SystemReducerActionTypes.LOG_IN,\r\n})\r\n\r\nexport const logOut = (): LogOutAction => ({\r\n    type: SystemReducerActionTypes.LOG_OUT,\r\n})\r\n\r\nexport const changeCardsDisplayMode = (displayMode: DisplayMode): ChangeCardsDisplayModeAction => ({\r\n    type: SystemReducerActionTypes.CHANGE_CARDS_DISPLAY_MODE,\r\n    payload: displayMode,\r\n})\r\n\r\nexport const changeTheme = (theme: Theme): ChangeThemeAction => ({\r\n    type: SystemReducerActionTypes.CHANGE_THEME,\r\n    payload: theme,\r\n})\r\n\r\nexport const pullAuthToken = (authToken: AuthToken): PullAuthTokenAction => {\r\n    localStorage.setItem(LOCAL_STORAGE_TOKEN_KEY, authToken)\r\n\r\n    return {\r\n        type: SystemReducerActionTypes.PULL_AUTH_TOKEN,\r\n        payload: authToken,\r\n    }\r\n}\r\n\r\nexport const openModalWindow = (componentInModal: ComponentInModal): OpenModalWindowAction => ({\r\n    type: SystemReducerActionTypes.OPEN_MODAL_WINDOW,\r\n    payload: componentInModal,\r\n})\r\n\r\nexport const closeModalWindow = (): CloseModalWindowAction => ({\r\n    type: SystemReducerActionTypes.CLOSE_MODAL_WINDOW,\r\n})\r\n","import {IUser, UserAvatarUrl} from 'types/user.types'\r\n\r\nexport enum UserReducerActionTypes {\r\n    FETCH_USER_DATA = 'FETCH_USER_DATA',\r\n    CHANGE_AVATAR = 'CHANGE_AVATAR',\r\n}\r\n\r\nexport interface FetchUserDataAction {\r\n    type: UserReducerActionTypes.FETCH_USER_DATA\r\n    payload: IUser\r\n}\r\n\r\nexport interface ChangeAvatarAction {\r\n    type: UserReducerActionTypes.CHANGE_AVATAR\r\n    payload: UserAvatarUrl\r\n}\r\n\r\n","import {Dispatch} from 'redux'\r\n\r\nimport {IResponseUserData} from 'types'\r\nimport {IUser, UserAvatarUrl} from 'types/user.types'\r\n\r\nimport {ChangeThemeAction, LogInAction, PullAuthTokenAction} from 'store/system/types'\r\nimport {changeTheme, logIn, pullAuthToken} from 'store/system/actions'\r\n\r\nimport {ChangeAvatarAction, FetchUserDataAction, UserReducerActionTypes} from './types'\r\n\r\ntype FetchUserDataAndLogIn =\r\n    FetchUserDataAction\r\n    | LogInAction\r\n    | ChangeThemeAction\r\n    | PullAuthTokenAction\r\n\r\nexport const fetchUserData = (data: IUser): FetchUserDataAction => ({\r\n    type: UserReducerActionTypes.FETCH_USER_DATA,\r\n    payload: data\r\n})\r\n\r\nexport const changeAvatar = (avatarUrl: UserAvatarUrl): ChangeAvatarAction => ({\r\n    type: UserReducerActionTypes.CHANGE_AVATAR,\r\n    payload: avatarUrl,\r\n})\r\n\r\nexport const fetchUserDataAndLogIn =\r\n    ({avatarUrl, authToken, theme, login}: IResponseUserData) =>\r\n    (dispatch: Dispatch<FetchUserDataAndLogIn>) => {\r\n        dispatch(fetchUserData({avatarUrl, login}))\r\n        dispatch(changeTheme(theme))\r\n        dispatch(pullAuthToken(authToken))\r\n        dispatch(logIn())\r\n    }\r\n\r\n\r\n","import {CardId} from 'types/card.types'\r\n\r\nexport enum SelectedCardsListActionTypes {\r\n    SELECT_CARD = 'SELECT_CARD',\r\n    CANCEL_SELECT_CARD = 'CANCEL_SELECT_CARD',\r\n    CANCEL_SELECT_ALL_CARDS = 'CANCEL_SELECT_ALL_CARDS',\r\n}\r\n\r\nexport interface SelectCardAction {\r\n    type: SelectedCardsListActionTypes.SELECT_CARD\r\n    payload: CardId\r\n}\r\n\r\nexport interface CancelSelectCardAction {\r\n    type: SelectedCardsListActionTypes.CANCEL_SELECT_CARD\r\n    payload: CardId\r\n}\r\n\r\nexport interface CancelSelectAllCardsAction {\r\n    type: SelectedCardsListActionTypes.CANCEL_SELECT_ALL_CARDS\r\n}\r\n","import {IUser} from 'types/user.types'\r\n\r\nimport {UserReducerActionTypes, FetchUserDataAction, ChangeAvatarAction} from './types'\r\n\r\ntype UserAction = FetchUserDataAction | ChangeAvatarAction\r\n\r\nconst initialState: IUser = {\r\n    login: '',\r\n    avatarUrl: '',\r\n}\r\n\r\nexport const userReducer = (state = initialState, action: UserAction): IUser => {\r\n    switch (action.type) {\r\n        case UserReducerActionTypes.FETCH_USER_DATA:\r\n            return {...state, ...action.payload}\r\n        case UserReducerActionTypes.CHANGE_AVATAR:\r\n            return {...state, avatarUrl: action.payload}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import {ISystem} from 'types/system.types'\r\n\r\nimport {\r\n    SystemReducerActionTypes,\r\n    LogInAction,\r\n    LogOutAction,\r\n    ChangeCardsDisplayModeAction,\r\n    ChangeThemeAction,\r\n    PullAuthTokenAction,\r\n    OpenModalWindowAction,\r\n    CloseModalWindowAction,\r\n} from './types'\r\n\r\ntype systemReducerAction =\r\n    | LogInAction\r\n    | LogOutAction\r\n    | ChangeCardsDisplayModeAction\r\n    | ChangeThemeAction\r\n    | PullAuthTokenAction\r\n    | OpenModalWindowAction\r\n    | CloseModalWindowAction\r\n\r\nconst initialState: ISystem = {\r\n    isAuthorized: false,\r\n    displayMode: 'scroll',\r\n    modalIsOpen: false,\r\n    componentInModal: null,\r\n    theme: 'light',\r\n    authToken: ''\r\n}\r\n\r\nexport const systemReducer = (state: ISystem = initialState, action: systemReducerAction): ISystem => {\r\n    switch (action.type) {\r\n        case SystemReducerActionTypes.LOG_IN:\r\n            return {...state, isAuthorized: true}\r\n        case SystemReducerActionTypes.LOG_OUT:\r\n            return {...state, isAuthorized: false}\r\n        case SystemReducerActionTypes.CHANGE_CARDS_DISPLAY_MODE:\r\n            return {...state, displayMode: action.payload}\r\n        case SystemReducerActionTypes.CHANGE_THEME:\r\n            if(action.payload === state.theme) return state\r\n\r\n            return {...state, theme: action.payload}\r\n        case SystemReducerActionTypes.PULL_AUTH_TOKEN:\r\n            return {...state, authToken: action.payload}\r\n        case SystemReducerActionTypes.OPEN_MODAL_WINDOW:\r\n            return {...state, modalIsOpen: true, componentInModal: action.payload}\r\n        case SystemReducerActionTypes.CLOSE_MODAL_WINDOW:\r\n            return {...state, modalIsOpen: false, componentInModal: null}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import {CardId} from 'types/card.types'\r\n\r\nimport {\r\n    SelectedCardsListActionTypes,\r\n    SelectCardAction,\r\n    CancelSelectCardAction,\r\n    CancelSelectAllCardsAction,\r\n} from './types'\r\n\r\nexport const selectCard = (id: CardId): SelectCardAction => ({\r\n    type: SelectedCardsListActionTypes.SELECT_CARD,\r\n    payload: id,\r\n})\r\n\r\nexport const cancelSelectCard = (id: CardId): CancelSelectCardAction => ({\r\n    type: SelectedCardsListActionTypes.CANCEL_SELECT_CARD,\r\n    payload: id,\r\n})\r\n\r\nexport const cancelSelectAllCards = (): CancelSelectAllCardsAction => ({\r\n    type: SelectedCardsListActionTypes.CANCEL_SELECT_ALL_CARDS,\r\n})\r\n","import {FolderId, IFolder} from 'types/folder.types'\r\n\r\nexport enum FoldersListReducerActionTypes {\r\n    FETCH_FOLDERS = 'FETCH_FOLDERS',\r\n    CREATE_FOLDER = 'CREATE_FOLDER',\r\n    EDIT_FOLDER = 'EDIT_FOLDER',\r\n    DELETE_FOLDER = 'DELETE_FOLDER',\r\n}\r\n\r\nexport interface FetchFoldersAction {\r\n    type: FoldersListReducerActionTypes.FETCH_FOLDERS\r\n    payload: IFolder[]\r\n}\r\n\r\nexport interface CreateFolderAction {\r\n    type: FoldersListReducerActionTypes.CREATE_FOLDER\r\n    payload: IFolder\r\n}\r\n\r\nexport interface EditFolderAction {\r\n    type: FoldersListReducerActionTypes.EDIT_FOLDER\r\n    payload: IFolder\r\n}\r\n\r\nexport interface DeleteFolderAction {\r\n    type: FoldersListReducerActionTypes.DELETE_FOLDER\r\n    payload: FolderId\r\n}\r\n","import {CardId} from 'types/card.types'\r\n\r\nimport {\r\n    SelectedCardsListActionTypes,\r\n    SelectCardAction,\r\n    CancelSelectCardAction,\r\n    CancelSelectAllCardsAction,\r\n} from './types'\r\n\r\ntype SelectedCardsIdListAction = SelectCardAction | CancelSelectCardAction | CancelSelectAllCardsAction\r\n\r\nconst initialState: CardId[] = []\r\n\r\nexport const selectedCardsIdListReducer = (\r\n    state: CardId[] = initialState,\r\n    action: SelectedCardsIdListAction\r\n): CardId[] => {\r\n    switch (action.type) {\r\n        case SelectedCardsListActionTypes.SELECT_CARD:\r\n            return [...state, action.payload]\r\n        case SelectedCardsListActionTypes.CANCEL_SELECT_CARD:\r\n            return state.filter((cardId) => cardId !== action.payload)\r\n        case SelectedCardsListActionTypes.CANCEL_SELECT_ALL_CARDS:\r\n            return []\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import {FolderId, IFolder} from 'types/folder.types'\r\n\r\nimport {\r\n    FoldersListReducerActionTypes,\r\n    FetchFoldersAction,\r\n    CreateFolderAction,\r\n    EditFolderAction,\r\n    DeleteFolderAction,\r\n} from './types'\r\n\r\nexport const fetchFolders = (folders: IFolder[]): FetchFoldersAction => ({\r\n    type: FoldersListReducerActionTypes.FETCH_FOLDERS,\r\n    payload: folders,\r\n})\r\n\r\nexport const createFolder = (folder: IFolder): CreateFolderAction => ({\r\n    type: FoldersListReducerActionTypes.CREATE_FOLDER,\r\n    payload: folder,\r\n})\r\n\r\nexport const editFolder = (folder: IFolder): EditFolderAction => ({\r\n    type: FoldersListReducerActionTypes.EDIT_FOLDER,\r\n    payload: folder,\r\n})\r\n\r\nexport const deleteFolder = (id: FolderId): DeleteFolderAction => ({\r\n    type: FoldersListReducerActionTypes.DELETE_FOLDER,\r\n    payload: id,\r\n})\r\n","import {CardId, ICard} from 'types/card.types'\r\n\r\nexport enum CardsListReducerActionTypes {\r\n    FETCH_CARDS_PAGINATION_MODE = 'FETCH_CARDS_PAGINATION_MODE',\r\n    FETCH_CARDS_SCROLL_MODE = 'FETCH_CARDS_SCROLL_MODE',\r\n    CREATE_CARD = 'CREATE_CARD',\r\n    EDIT_CARD = 'EDIT_CARD',\r\n    DELETE_CARD = 'DELETE_CARD',\r\n}\r\n\r\nexport interface FetchCardsPaginationModeAction {\r\n    type: CardsListReducerActionTypes.FETCH_CARDS_PAGINATION_MODE\r\n    payload: ICard[]\r\n}\r\n\r\nexport interface FetchCardsScrollModeAction {\r\n    type: CardsListReducerActionTypes.FETCH_CARDS_SCROLL_MODE\r\n    payload: ICard[]\r\n}\r\n\r\nexport interface CreateCardAction {\r\n    type: CardsListReducerActionTypes.CREATE_CARD\r\n    payload: ICard\r\n}\r\n\r\nexport interface EditCardAction {\r\n    type: CardsListReducerActionTypes.EDIT_CARD\r\n    payload: ICard\r\n}\r\n\r\nexport interface DeleteCardAction {\r\n    type: CardsListReducerActionTypes.DELETE_CARD\r\n    payload: {\r\n        id: CardId,\r\n        newCard?: ICard,\r\n    }\r\n}\r\n","import {IFolder} from 'types/folder.types'\r\n\r\nimport {\r\n    FoldersListReducerActionTypes,\r\n    FetchFoldersAction,\r\n    CreateFolderAction,\r\n    EditFolderAction,\r\n    DeleteFolderAction,\r\n} from './types'\r\n\r\ntype FoldersListAction = FetchFoldersAction | CreateFolderAction | EditFolderAction | DeleteFolderAction\r\n\r\nconst initialState: IFolder[] = []\r\n\r\nexport const foldersListReducer = (state: IFolder[] = initialState, action: FoldersListAction): IFolder[] => {\r\n    switch (action.type) {\r\n        case FoldersListReducerActionTypes.FETCH_FOLDERS:\r\n            return action.payload\r\n        case FoldersListReducerActionTypes.CREATE_FOLDER:\r\n            return [...state, action.payload]\r\n        case FoldersListReducerActionTypes.EDIT_FOLDER:\r\n            return state.map((folder) => (folder.id === action.payload.id ? action.payload : folder))\r\n        case FoldersListReducerActionTypes.DELETE_FOLDER:\r\n            return state.filter((folder) => folder.id !== action.payload)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import {CardId, ICard} from 'types/card.types'\r\n\r\nimport {\r\n    CardsListReducerActionTypes,\r\n    FetchCardsPaginationModeAction,\r\n    FetchCardsScrollModeAction,\r\n    CreateCardAction,\r\n    EditCardAction,\r\n    DeleteCardAction,\r\n} from './types'\r\n\r\nexport const fetchCardsPaginationMode = (cards: ICard[]): FetchCardsPaginationModeAction => ({\r\n    type: CardsListReducerActionTypes.FETCH_CARDS_PAGINATION_MODE,\r\n    payload: cards,\r\n})\r\n\r\nexport const fetchCardsScrollMode = (cards: ICard[]): FetchCardsScrollModeAction => ({\r\n    type: CardsListReducerActionTypes.FETCH_CARDS_SCROLL_MODE,\r\n    payload: cards,\r\n})\r\n\r\nexport const createCard = (card: ICard): CreateCardAction => ({\r\n    type: CardsListReducerActionTypes.CREATE_CARD,\r\n    payload: card,\r\n})\r\n\r\nexport const editCard = (card: ICard): EditCardAction => ({\r\n    type: CardsListReducerActionTypes.EDIT_CARD,\r\n    payload: card,\r\n})\r\n\r\ntype DeleteCardParams = {id: CardId, newCard: ICard}\r\nexport const deleteCard = ({id, newCard}: DeleteCardParams): DeleteCardAction => ({\r\n    type: CardsListReducerActionTypes.DELETE_CARD,\r\n    payload: {\r\n        id,\r\n        newCard,\r\n    },\r\n})\r\n","import {ICard} from 'types/card.types'\r\n\r\nimport {\r\n    CardsListReducerActionTypes,\r\n    FetchCardsPaginationModeAction,\r\n    FetchCardsScrollModeAction,\r\n    CreateCardAction,\r\n    EditCardAction,\r\n    DeleteCardAction,\r\n} from './types'\r\n\r\ntype CardsListAction =\r\n    | FetchCardsPaginationModeAction\r\n    | FetchCardsScrollModeAction\r\n    | CreateCardAction\r\n    | EditCardAction\r\n    | DeleteCardAction\r\n\r\nconst initialState: ICard[] = []\r\n\r\nexport const cardsListReducer = (state: ICard[] = initialState, action: CardsListAction): ICard[] => {\r\n    switch (action.type) {\r\n        case CardsListReducerActionTypes.FETCH_CARDS_PAGINATION_MODE:\r\n            return action.payload\r\n        case CardsListReducerActionTypes.FETCH_CARDS_SCROLL_MODE:\r\n            return [...state, ...action.payload]\r\n        case CardsListReducerActionTypes.CREATE_CARD:\r\n            return [action.payload, ...state]\r\n        case CardsListReducerActionTypes.EDIT_CARD:\r\n            return state.map((card) => (card.id === action.payload.id ? action.payload : card)).slice(0, -1)\r\n        case CardsListReducerActionTypes.DELETE_CARD:\r\n            const filteredState = state.filter((card) => card.id !== action.payload.id)\r\n\r\n            return action.payload.newCard ? [...filteredState, action.payload.newCard] : filteredState\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport {composeWithDevTools} from 'redux-devtools-extension'\r\n\r\nimport {userReducer, userActions} from './user'\r\nimport {systemReducer, systemActions} from './system'\r\nimport {selectedCardsIdListReducer, selectedCardsIdListActions} from './selectedCardsIdList'\r\nimport {foldersListReducer, foldersListActions} from './foldersList'\r\nimport {cardsListReducer, cardsListActions} from './cardsList'\r\n\r\nexport const actions = {\r\n    userActions,\r\n    cardsListActions,\r\n    foldersListActions,\r\n    selectedCardsIdListActions,\r\n    systemActions,\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n    userState: userReducer,\r\n    cardsListState: cardsListReducer,\r\n    selectedCardsIdListState: selectedCardsIdListReducer,\r\n    foldersListState: foldersListReducer,\r\n    systemState: systemReducer,\r\n})\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)))\r\n","const getResponse = async <T>(apiUrl: string, params?: RequestInit): Promise<T> => {\r\n    const response = await fetch(apiUrl, params)\r\n    const data = await response.json()\r\n\r\n    if (!response.ok) {\r\n        if (data.error) console.log(data.error)\r\n        throw new Error(data.message)\r\n    }\r\n\r\n    return data\r\n}\r\n\r\nexport default getResponse\r\n","interface IPossibleClassName {\r\n    [key: string]: boolean\r\n}\r\n\r\ntype GetClassNameValue = string | IPossibleClassName\r\n\r\nconst getClassName = (classNames: GetClassNameValue[]) =>\r\n    classNames.reduce((accum: string, value: GetClassNameValue) => {\r\n        let classNamesChain = accum\r\n\r\n        if (typeof value === 'object') {\r\n            const values = Object.entries(value)\r\n\r\n            values.forEach(([className, isNeeded]) => {\r\n                if (isNeeded) {\r\n                    classNamesChain = `${classNamesChain} ${className}`\r\n                }\r\n            })\r\n\r\n            return classNamesChain\r\n        }\r\n        classNamesChain = `${classNamesChain} ${value}`\r\n\r\n        return classNamesChain\r\n    }, '')\r\n\r\nexport default getClassName\r\n","import React, {ChangeEvent, FC, memo, useCallback, useMemo, useState} from 'react'\r\n\r\nimport {getClassName} from 'helpers'\r\nimport cl from './index.module.scss'\r\n\r\nexport interface AuthInputProps {\r\n    className?: string\r\n    placeholder: string\r\n    value: string\r\n    type: 'text' | 'password'\r\n    children?: React.ReactNode\r\n    changeHandler: (event: ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nconst AuthInput: FC<AuthInputProps> = ({changeHandler, placeholder, value, className, type, children}) => {\r\n    const [isFocused, setIsFocused] = useState<boolean>(false)\r\n    const focusHandler =  useCallback(() => setIsFocused(true), [setIsFocused])\r\n    const blurHandler = useCallback(() => setIsFocused(false), [setIsFocused])\r\n\r\n    const inputContainerClassName = useMemo(\r\n        () => getClassName([cl.inputAuthContainer, className || '']),\r\n        [cl, className, getClassName]\r\n    )\r\n    const inputClassName = useMemo(() => getClassName([cl.inputAuth]), [cl, getClassName])\r\n\r\n    return (\r\n        <label className={getClassName([inputContainerClassName, {\r\n            [cl.inputIsFocused]: isFocused,\r\n        }])}>\r\n            <input\r\n                placeholder={placeholder}\r\n                value={value}\r\n                className={inputClassName}\r\n                onChange={changeHandler}\r\n                onFocus={focusHandler}\r\n                onBlur={blurHandler}\r\n                type={type}\r\n            />\r\n            {children}\r\n        </label>\r\n    )\r\n}\r\n\r\nexport default memo(AuthInput)\r\n","import {useDispatch} from 'react-redux'\r\nimport {bindActionCreators} from 'redux'\r\nimport {actions} from 'store'\r\n\r\ninterface TypesOfActions {\r\n    user: 'userActions'\r\n    cardsList: 'cardsListActions'\r\n    foldersList: 'foldersListActions'\r\n    selectedCardsIdList: 'selectedCardsIdListActions'\r\n    system: 'systemActions'\r\n}\r\n\r\nconst typesOfActions: TypesOfActions = {\r\n    user: 'userActions',\r\n    cardsList: 'cardsListActions',\r\n    foldersList: 'foldersListActions',\r\n    selectedCardsIdList: 'selectedCardsIdListActions',\r\n    system: 'systemActions',\r\n}\r\n\r\nconst useActions = <A>(typeOfActionsKey: keyof TypesOfActions): A => {\r\n    const dispatch = useDispatch()\r\n    const typeOfAction = typesOfActions[typeOfActionsKey]\r\n\r\n    return bindActionCreators<A, any>(actions[typeOfAction], dispatch)\r\n}\r\n\r\nexport default useActions\r\n","import {Dispatch, SetStateAction, useState} from 'react'\r\n\r\ntype Fetching = () => Promise<void>\r\n\r\ninterface IUseFetchParams {\r\n    setError?: Dispatch<SetStateAction<string>>\r\n    setIsLoading?: Dispatch<SetStateAction<boolean>>\r\n}\r\n\r\ntype UseFetch = (callback: () => Promise<void> | void, params: IUseFetchParams) => [Fetching, boolean] | [Fetching]\r\n\r\nconst useFetch: UseFetch = (callback, {setError, setIsLoading: changeIsLoading}) => {\r\n    const hasStrangerSetIsLoading = Boolean(changeIsLoading)\r\n    const [isLoading, setIsLoading] = hasStrangerSetIsLoading\r\n                                      ? [undefined, changeIsLoading]\r\n                                      : useState<boolean>(false)\r\n\r\n    const fetching: Fetching = async () => {\r\n        if(!setIsLoading) return\r\n\r\n        try {\r\n            setIsLoading(true)\r\n            await callback()\r\n        } catch (e: any) {\r\n            if (e.message && setError) setError(e.message)\r\n        } finally {\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    return hasStrangerSetIsLoading ? [fetching] : [fetching, Boolean(isLoading)]\r\n}\r\n\r\nexport default useFetch\r\n","import {TypedUseSelectorHook, useSelector} from 'react-redux'\r\n\r\nimport {RootState} from 'store'\r\n\r\nconst useTypedSelector: TypedUseSelectorHook<RootState> = useSelector\r\n\r\nexport default useTypedSelector\r\n","import React, {Dispatch, FC, memo, SetStateAction, useCallback} from 'react'\r\n\r\nimport {useFetch} from 'hooks'\r\n\r\nimport cl from './index.module.scss'\r\n\r\nexport interface AuthFormProps {\r\n    onSubmit: () => Promise<void>\r\n    setError: Dispatch<SetStateAction<string>>\r\n    setIsLoading: Dispatch<SetStateAction<boolean>>\r\n    children?: React.ReactNode\r\n}\r\n\r\nconst AuthForm: FC<AuthFormProps> = ({onSubmit, setError, setIsLoading, children}) => {\r\n    const useFetchCallback = useCallback(useFetch, [onSubmit, setError, setIsLoading])\r\n\r\n    const [getAuth] = useFetchCallback(onSubmit, {setError, setIsLoading})\r\n\r\n    const submitHandler = useCallback((event: React.FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault()\r\n        getAuth()\r\n    }, [getAuth])\r\n\r\n    return <form className={cl.authForm} onSubmit={submitHandler}>{children}</form>\r\n}\r\n\r\nexport default memo(AuthForm)\r\n","import React, {FC} from 'react'\r\n\r\nimport {getClassName} from 'helpers'\r\n\r\nimport cl from './index.module.scss'\r\n\r\ninterface AuthButtonProps {\r\n    className?: string\r\n    isLoading: boolean\r\n    isDisabled: boolean\r\n}\r\n\r\nconst AuthButton: FC<AuthButtonProps> = ({className, isLoading, isDisabled, children}) => (\r\n    <button type=\"submit\" disabled={isDisabled} className={getClassName([cl.authButton, className || ''])}>\r\n        {isLoading ? 'LOADING' : children}\r\n    </button>\r\n)\r\n\r\nAuthButton.defaultProps = {\r\n    className: undefined\r\n}\r\n\r\nexport default AuthButton\r\n","import React, {FC} from 'react'\r\n\r\nimport {getClassName} from 'helpers'\r\nimport AuthInput, {AuthInputProps} from 'UI/Input/Auth'\r\n\r\nimport cl from './index.module.scss'\r\n\r\ninterface PassInputProps extends AuthInputProps {\r\n    clickHandler: () => void\r\n}\r\n\r\nconst PassInput: FC<PassInputProps> = ({value, placeholder, type, changeHandler, clickHandler}) => (\r\n    <AuthInput className={cl.passIcon} placeholder={placeholder} value={value} type={type} changeHandler={changeHandler}>\r\n        <button\r\n            className={getClassName([cl.toggleViewPassBtn, type === 'password' ? cl.hidePass : cl.openPass])}\r\n            type=\"button\"\r\n            aria-label=\"See password\"\r\n            onClick={clickHandler}\r\n        />\r\n    </AuthInput>\r\n)\r\n\r\nexport default PassInput\r\n","import React, {FC, memo, useCallback, useState} from 'react'\r\n\r\nimport {AuthInputProps} from 'UI/Input/Auth'\r\nimport PassInputComponent from 'components/PassInput'\r\n\r\ntype PassInputProps = Pick<AuthInputProps, 'changeHandler' | 'value' | 'placeholder'>\r\n\r\nconst PassInput: FC<PassInputProps> = ({changeHandler, placeholder, value}) => {\r\n    const [type, setType] = useState<'text' | 'password'>('password')\r\n\r\n    const clickHandler = useCallback(() => setType((prev) => (prev === 'text' ? 'password' : 'text')), [setType])\r\n\r\n    return <PassInputComponent placeholder={placeholder} value={value} type={type} changeHandler={changeHandler} clickHandler={clickHandler} />\r\n}\r\n\r\nexport default memo(PassInput)\r\n","import React, {FC} from 'react'\r\n\r\nimport AuthInput from 'UI/Input/Auth'\r\nimport AuthForm, {AuthFormProps} from 'UI/Form/Auth'\r\nimport AuthButton from 'UI/Button/Auth'\r\n\r\nimport PassInput from 'containers/PassInput'\r\n\r\nimport cl from './index.module.scss'\r\nimport {getClassName} from '../../helpers'\r\n\r\ninterface RegFormProps extends AuthFormProps {\r\n    submitIsDisabled: boolean\r\n    isLoading: boolean\r\n    error: string\r\n    login: string\r\n    password: string\r\n    confirmPassword: string\r\n    changeLoginHandler: (event: React.ChangeEvent<HTMLInputElement>) => void\r\n    changePasswordHandler: (event: React.ChangeEvent<HTMLInputElement>) => void\r\n    changeConfirmPasswordHandler: (event: React.ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nconst RegForm: FC<RegFormProps> = ({\r\n    onSubmit,\r\n    setError,\r\n    setIsLoading,\r\n    login,\r\n    changeLoginHandler,\r\n    password,\r\n    changePasswordHandler,\r\n    confirmPassword,\r\n    changeConfirmPasswordHandler,\r\n    error,\r\n    submitIsDisabled,\r\n    isLoading,\r\n}) => (\r\n    <div className={cl.regFormWrapper}>\r\n        <AuthForm onSubmit={onSubmit} setError={setError} setIsLoading={setIsLoading}>\r\n            <p>Hey there,</p>\r\n            <h1>Create an Account</h1>\r\n            <AuthInput\r\n                className={getClassName([cl.loginInputIcon, cl.loginInput])}\r\n                placeholder=\"Login\"\r\n                value={login}\r\n                changeHandler={changeLoginHandler}\r\n                type=\"text\"\r\n            />\r\n            <PassInput placeholder=\"Password\" value={password} changeHandler={changePasswordHandler} />\r\n            <PassInput\r\n                placeholder=\"Re-enter password\"\r\n                value={confirmPassword}\r\n                changeHandler={changeConfirmPasswordHandler}\r\n            />\r\n            {error && <p className={cl.error}>{error}</p>}\r\n            <AuthButton className={getClassName([cl.authButton, {\r\n                [cl.authButtonWithFormError]: Boolean(error),\r\n            }])} isLoading={isLoading} isDisabled={submitIsDisabled}>\r\n                Register\r\n            </AuthButton>\r\n            <p className={cl.centered}>Already have an account? <a className={cl.link} href=\"/\">Login</a></p>\r\n        </AuthForm>\r\n    </div>\r\n)\r\n\r\nexport default RegForm\r\n","import {BASE_API_URL} from 'constants.json'\r\nimport {getResponse} from 'helpers'\r\n\r\nimport {IAuthService, Register} from './types'\r\n\r\nconst authService: IAuthService = {\r\n    async logIn({login, password}) {\r\n        const apiUrl = 'auth/authorization'\r\n        const params = {\r\n            method: 'POST',\r\n            body: JSON.stringify({login, password}),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        }\r\n\r\n        return getResponse(`${BASE_API_URL}/${apiUrl}`, params)\r\n    },\r\n    async register({login, password}: Register) {\r\n        const apiUrl = 'auth/registration'\r\n        const params = {\r\n            method: 'POST',\r\n            body: JSON.stringify({login, password}),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        }\r\n\r\n        return getResponse(`${BASE_API_URL}/${apiUrl}`, params)\r\n    },\r\n}\r\n\r\nexport default authService\r\n","import React, {FC, useCallback, useMemo, useState} from 'react'\r\nimport RegFormComponent from 'components/RegForm'\r\nimport {authService} from 'API'\r\nimport {useActions} from 'hooks'\r\nimport {userActions} from 'store/user'\r\n\r\nconst RegForm: FC = () => {\r\n    const [login, setLogin] = useState<string>('')\r\n    const [password, setPassword] = useState<string>('')\r\n    const [confirmPassword, setConfirmPassword] = useState<string>('')\r\n    const [error, setError] = useState<string>('')\r\n    const [isLoading, setIsLoading] = useState<boolean>(false)\r\n    const {fetchUserDataAndLogIn} = useActions<typeof userActions>('user')\r\n\r\n    const submitIsDisabled = useMemo(\r\n        () => login.length < 3 || login.length > 11 || password.length < 8 || confirmPassword !== password,\r\n        [login, password, confirmPassword]\r\n    )\r\n\r\n    const submitHandler = useCallback(async () => {\r\n        if (submitIsDisabled) return\r\n        const data = await authService.register({login, password})\r\n\r\n        fetchUserDataAndLogIn(data)\r\n    }, [authService, submitIsDisabled])\r\n\r\n    const changeLoginHandler = useCallback((event) => setLogin(event.target.value), [])\r\n    const changePasswordHandler = useCallback((event) => setPassword(event.target.value), [])\r\n    const changeConfirmPasswordHandler = useCallback((event) => setConfirmPassword(event.target.value), [])\r\n\r\n    return (\r\n        <RegFormComponent\r\n            onSubmit={submitHandler}\r\n            submitIsDisabled={submitIsDisabled}\r\n            isLoading={isLoading}\r\n            error={error}\r\n            login={login}\r\n            password={password}\r\n            confirmPassword={confirmPassword}\r\n            changeLoginHandler={changeLoginHandler}\r\n            changePasswordHandler={changePasswordHandler}\r\n            changeConfirmPasswordHandler={changeConfirmPasswordHandler}\r\n            setError={setError}\r\n            setIsLoading={setIsLoading}\r\n        />\r\n    )\r\n}\r\n\r\nexport default RegForm\r\n","import RegForm from 'containers/RegForm'\nimport React from 'react'\n\nimport cl from '../index.module.scss'\n\nconst RegistrationPage = () => (\n    <div className={cl.regBackground}>\n        <div className={cl.regContainer}>\n            <div className={cl.regDecorativeImg} />\n            <div className={cl.regFormWrapper}>\n                <RegForm />\n            </div>\n        </div>\n    </div>\n)\n\nexport default RegistrationPage\n","import React, {useEffect} from 'react'\r\n\r\nimport RegistrationPage from 'pages/Auth/RegistrationPage'\r\nimport {useTypedSelector} from 'hooks'\r\n\r\nconst App = () => {\r\n    const {theme} = useTypedSelector((state) => state.systemState)\r\n\r\n    useEffect(() => {\r\n        document.body.id = theme\r\n    }, [theme])\r\n\r\n    return <RegistrationPage />\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {Provider} from 'react-redux'\n\nimport {store} from 'store'\n\nimport App from './App'\nimport './index.scss'\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginInput\":\"RegForm_loginInput__23sSC\",\"loginInputIcon\":\"RegForm_loginInputIcon__M4ZQB\",\"regFormWrapper\":\"RegForm_regFormWrapper__1Lw1H\",\"centered\":\"RegForm_centered__28Cz9\",\"error\":\"RegForm_error__26bXc\",\"authButton\":\"RegForm_authButton__3X6na\",\"authButtonWithFormError\":\"RegForm_authButtonWithFormError__3KiKG\",\"link\":\"RegForm_link__2_4gG\"};"],"sourceRoot":""}